stages:
  - test

variables:
  POSTGRES_DB: student
  POSTGRES_USER: admin
  POSTGRES_PASSWORD: admin
  SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/student
  SPRING_DATASOURCE_USERNAME: admin
  SPRING_DATASOURCE_PASSWORD: admin
  SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop

services:
  - name: postgres:13
    alias: postgres
    command: ["postgres", "-c", "log_statement=all"]

test_job:
  stage: test
  image: maven:3.8.1-jdk-11
  before_script:
    - apt-get update && apt-get install -y postgresql-client git time
    - echo "Waiting for PostgreSQL to be ready..."
    - until PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -d $POSTGRES_DB -c "SELECT 1;" &>/dev/null; do sleep 2; done
    - echo "PostgreSQL is ready!"
    - mkdir -p logs  # Ensure logs directory exists
    - git clone https://github.com/joular/joularjx.git
    - cd joularjx
    - ./mvnw clean install -DskipTests
    - cd ..
  script:
    - echo "Fetching last 5 commits excluding 'Update .gitlab-ci.yml file'..."
    - git fetch --all
    - git log --pretty=format:'%H %s' | grep -v "Update .gitlab-ci.yml file" | head -n 5 > logs/commit_history.log
    - echo "Processing last 5 commits..."
    - |
      current_branch=$(git rev-parse --abbrev-ref HEAD)
      while read commit_hash commit_message; do
        echo "Processing commit $commit_hash: $commit_message" | tee -a logs/resource_usage.log
        git checkout $commit_hash
        echo "Running tests for commit $commit_hash..." | tee -a logs/resource_usage.log
        # Run tests with JoularJX agent
        mkdir -p logs/$commit_hash
        mvn clean package
        /usr/bin/time -v java -javaagent:joularjx/target/joularjx.jar -jar target/tp4-0.0.1-SNAPSHOT.jar | tee logs/$commit_hash/test_output.log
        # Store the time output in a separate file
        /usr/bin/time -v java -javaagent:joularjx/target/joularjx.jar -jar target/tp4-0.0.1-SNAPSHOT.jar &> logs/$commit_hash/time_output.log
        # Check for the metrics in the test output log
        if grep -q 'Test Metrics' logs/$commit_hash/test_output.log; then
          grep 'Test Metrics' logs/$commit_hash/test_output.log >> logs/resource_usage.log
        else
          echo "No metrics found in commit $commit_hash" >> logs/resource_usage.log
        fi
        git checkout $current_branch
      done < logs/commit_history.log
  artifacts:
    paths:
      - logs/
    expire_in: 1 week
