stages:
  - test

include:
  project: 'bl-drit/bl.drit.experiments/software.engineering/ecodesing/bl-eco-ci-energy-estimation'
  file: '/eco-ci-gitlab.yml'
  ref: 'develop'

variables:
  POSTGRES_DB: student
  POSTGRES_USER: admin
  POSTGRES_PASSWORD: admin
  SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/student
  SPRING_DATASOURCE_USERNAME: admin
  SPRING_DATASOURCE_PASSWORD: admin
  SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop

services:
  - name: postgres:13
    alias: postgres
    command: ["postgres", "-c", "log_statement=all"]

test_job:
  stage: test
  image: maven:3.8.1-jdk-11
  before_script:
    - apt-get update -y
    - apt-get install -y postgresql-client git curl jq
    - echo "Waiting for PostgreSQL to be ready..."
    - until PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -d $POSTGRES_DB -c "SELECT 1;" &>/dev/null; do sleep 2; done
    - echo "PostgreSQL is ready!"
    - mkdir -p logs
  script:
    - echo "Fetching last 5 commits excluding 'Update .gitlab-ci.yml file'..."
    - git fetch --all
    - git log --pretty=format:'%H %s' | tee logs/git_log_raw.txt  # Debugging
    - grep -v "Update .gitlab-ci.yml file" logs/git_log_raw.txt | grep -v "Update file .gitlab-ci.yml" | head -n 5 > logs/commit_history.log || true

    # Ensure at least one commit exists
    - if [ ! -s logs/commit_history.log ]; then 
        git log --pretty=format:'%H %s' -n 1 > logs/commit_history.log;
        echo "Warning: No valid commits found. Using latest commit instead.";
      fi

    - echo "Processing commits from logs/commit_history.log..."
    - cat logs/commit_history.log  # Debugging

    - >
      current_branch=$(git rev-parse --abbrev-ref HEAD);
      while read commit_hash commit_message; do
        echo "Processing commit $commit_hash: $commit_message";
        git checkout $commit_hash || continue;
        echo "Running tests for commit $commit_hash...";
        mkdir -p logs/$commit_hash;
        !reference [.start_measurement, script]
        mvn clean test | tee logs/$commit_hash/test_output.log;
        export ECO_CI_LABEL="Measure commit $commit_hash";
        !reference [.get_measurement, script]

        exec 3>&1 4>&2
        exec > >(tee logs/$commit_hash/display_results_$commit_hash.txt) 2>&1
        !reference [.display_results, script]
        exec 1>&3 2>&4

        if grep -q 'Test Metrics' logs/$commit_hash/test_output.log; then
          grep 'Test Metrics' logs/$commit_hash/test_output.log >> logs/resource_usage.log;
        else
          echo "No metrics found in commit $commit_hash" >> logs/resource_usage.log;
        fi;

        git checkout $current_branch;
      done < logs/commit_history.log

    # Ensure metrics.txt exists to avoid artifact errors
    - touch logs/metrics.txt
    - echo "Metrics file generated" > logs/metrics.txt

  artifacts:
    paths:
      - logs/
      - logs/metrics.txt
      - eco-ci-output.txt
    #reports:
     # metrics: logs/metrics.txt
    expire_in: 1 week
