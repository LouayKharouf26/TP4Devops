stages:
  - test

include:
  project: 'bl-drit/bl.drit.experiments/software.engineering/ecodesing/bl-eco-ci-energy-estimation'
  file: '/eco-ci-gitlab.yml'
  ref: 'develop'

variables:
  POSTGRES_DB: student
  POSTGRES_USER: admin
  POSTGRES_PASSWORD: admin
  SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/student
  SPRING_DATASOURCE_USERNAME: admin
  SPRING_DATASOURCE_PASSWORD: admin
  SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
  # (Assume other eco‑CI–related variables are defined here or in the included file)

services:
  - name: postgres:13
    alias: postgres
    command: ["postgres", "-c", "log_statement=all"]

test_job:
  stage: test
  image: maven:3.8.1-jdk-11
  before_script:
    - apt-get update -y
    - apt-get install -y postgresql-client git curl jq
    - echo "Waiting for PostgreSQL to be ready..."
    - until PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -d $POSTGRES_DB -c "SELECT 1;" &>/dev/null; do sleep 2; done
    - echo "PostgreSQL is ready!"
    - mkdir -p logs
    - git fetch --unshallow || echo "Repository already unshallowed"
    - touch metrics.txt
  script:
    # Fetch commit history
    - echo "Fetching last 2 commits excluding 'Update .gitlab-ci.yml file'..."
    - git fetch --all
    - git log --pretty=format:'%H %s' | grep -Ev "Update (\.gitlab-ci\.yml file|file \.gitlab-ci\.yml)" | head -n 2 > logs/commit_history.log
    - echo "Processing commits from logs/commit_history.log..."
    # Start the loop: this folded block starts the while loop
    - >
      current_branch=$(git rev-parse --abbrev-ref HEAD);
      while read commit_hash commit_message; do
        echo "Processing commit $commit_hash: $commit_message";
        git checkout $commit_hash;
        echo "Running tests for commit $commit_hash...";
        mkdir -p logs/$commit_hash;
    # Insert eco‑CI start measurement 
    - !reference [.start_measurement, script]
    # Continue with testing and label setting
    - >
      mvn clean test | tee logs/$commit_hash/test_output.log;
      export ECO_CI_LABEL="Measure commit $commit_hash";
    # Insert eco‑CI get measurement step
    - !reference [.get_measurement, script]

    # Insert eco‑CI display results step
    - exec 3>&1 4>&2
    # Redirect stdout/stderr to tee for capturing output in a file
    - exec > >(tee logs/$commit_hash/display_results_$commit_hash.txt) 2>&1
    - !reference [.display_results, script]
    # Restore stdout/stderr after the referenced commands run
    - exec 1>&3 2>&4

    # Finish the loop: check for metrics, restore branch, and close the loop
    - >
      if grep -q 'Test Metrics' logs/$commit_hash/test_output.log; then
        grep 'Test Metrics' logs/$commit_hash/test_output.log >> logs/resource_usage.log;
      else
        echo "No metrics found in commit $commit_hash" >> logs/resource_usage.log;
      fi;
      git checkout $current_branch;
      done < logs/commit_history.log
  artifacts:
    paths:
      - logs/
      - eco-ci-output.txt
    reports:
      metrics: metrics.txt
    expire_in: 1 week